# Напишите программу, удалющую из текста все слова, содержащие ""абв"".
# 'авгдейка - это передача' = >" - это переедача"

text = 'Абвгдейка, абвооавлава - это передача абвооавлава'
text = text.lower().split()
string_text = " ".join(map(str,[t for t in text if 'абв' not in t]))
print(string_text)


--------------------------

# 2- Создайте программу для игры с конфетами человек против человека.

# Условие задачи: На столе лежит 2021 конфета(или сколько вы зададите). Играют два игрока делая ход друг после друга. Первый ход определяется жеребьёвкой. За один ход можно забрать не более чем 28 конфет(или сколько вы зададите). Тот, кто берет последнюю конфету - проиграл.
# Предусмотрите последний ход, ибо там конфет остается меньше.
# a) Добавьте игру против бота
# b) Подумайте как наделить бота ""интеллектом""


# Создайте программу для игры с конфетами человек против человека.
# Условие задачи: На столе лежит 2021 конфета(или сколько вы зададите). 
# Играют два игрока делая ход друг после друга. Первый ход определяется 
# жеребьёвкой. За один ход можно забрать не более чем 28 конфет(или сколько вы зададите). 
# Тот, кто берет последнюю конфету - проиграл.
# Предусмотрите последний ход, ибо там конфет остается меньше.
# a) Добавьте игру против бота
# b) Подумайте как наделить бота ""интеллектом""
# Человек против человека
import random

cand = int(input("Введите количество конфет: "))
max_cand = int(input("\nВведите максимальное количество конфет, которые можно забрать за один ход: "))
person_1 = input("\nВведите имя первого игрока: ")
person_2 = input("\nВведите имя второго игрока: ")
draw = random.choice([person_1, person_2])
print(f'\nПервым ходит: {draw}')

def check_num(max_can, name):
    x = int(input(f"\n{name}, можете забрать конфет в диапозоне от {1} - {max_can}: "))
    while x < 1 or x > max_can:
        x = int(input(f"\n{name}, можете забрать конфет в диапозоне от {1} - {max_can}: "))
    return x

def person(candy, max_candy, player_1, player_2):
    while candy != 0:
        if candy < max_candy:
            max_candy = candy
        number = check_num(max_candy, player_1)
        candy -= number
        print(f"\n{player_1} забрал {number} конфет, осталось {candy}")
        if candy < max_candy:
            max_candy = candy
        if candy == 0:
            print(f"\n{player_1} ПРОИГРАЛ")
            break
        else:
            number = check_num(max_candy, player_2)
            candy -= number
            print(f"\n{player_2} забрал {number} конфет, осталось {candy}")
            if candy == 0:
                print(f"\n{player_2} ПРОИГРАЛ")
                break
            else:
                continue

if draw == person_1:
    person(cand, max_cand, person_1, person_2)
else:
    person(cand, max_cand, person_2, person_1)
    
--------------------------
3.
# Создайте два списка — один с названиями языков программирования, 
# другой — с числами от 1 до длины первого.
# ['python', 'c#']
# [1,2]
# Вам нужно сделать две функции: первая из которых создаст список кортежей, 
# состоящих из номера и языка, написанного большими буквами.
# [(1,'PYTHON'), (2,'C#')]
# Вторая — которая отфильтрует этот список следующим образом: если 
# сумма очков слова имеет в делителях номер, с которым она в паре в 
# кортеже, то кортеж остается, его номер заменяется на сумму очков.
# [сумма очков c# = 102, в делителях есть 2 с которым в паре. Значит список будет]
# [(1,'PYTHON'), (102,'C#')]
# Если нет — удаляется. Суммой очков называется сложение порядковых номеров букв в слове. 
# Порядковые номера смотрите в этой таблице, в третьем столбце: https://www.charset.org/utf-8
# Это — 16-ричная система, поищите, как правильнее и быстрее получать эти символы.
# Cложите получившиеся числа и верните из функции в качестве ответа вместе с преобразованным списком
list_1 = ['python', 'c#', 'javascript']
list_2 = [1, 2, 3]

def num_lan(list_lan_1, list_num_2):
    list_lan_1 = [str(i).upper() for i in list_lan_1]
    new_list = list(zip(list_num_2, list_lan_1))
    return new_list

def sum_letters():
    words = num_lan(list_1, list_2)
    new_list = []
    for j in words:
        list_3 = list(j)
        word = str(list_3[1])
        summa = 0
        for i, char in enumerate(word):
            summa += ord(char)
        if str(j[0]) in str(summa):
            list_3[0] = summa
            new_list.append(tuple(list_3))
    return new_list

print(sum_letters())

--------------------------


4.


